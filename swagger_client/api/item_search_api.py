# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItemSearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_search(self, search, **kwargs):  # noqa: E501
        """Create Saved Search  # noqa: E501

        Create a new saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_search(search, async=True)
        >>> result = thread.get()

        :param async bool
        :param SavedSearch search: The structured search criteria. (required)
        :param bool strict: Strictly remove false positives from geo intersection.
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.create_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def create_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """Create Saved Search  # noqa: E501

        Create a new saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_search_with_http_info(search, async=True)
        >>> result = thread.get()

        :param async bool
        :param SavedSearch search: The structured search criteria. (required)
        :param bool strict: Strictly remove false positives from geo intersection.
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'strict']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `create_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'strict' in params:
            query_params.append(('strict', params['strict']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/searches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_searches(self, **kwargs):  # noqa: E501
        """List Saved Searches  # noqa: E501

        List all saved searches available to the authenticated user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_searches(async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Token representing a specific page of results. This should never be constructed manually.
        :param int page_size: Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.
        :param str sort: Field and direction to order results by. This may not be provided with the \"_page\" parameter.
        :param str search_type: Search type filter.
        :return: SearchPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_searches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_searches_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_searches_with_http_info(self, **kwargs):  # noqa: E501
        """List Saved Searches  # noqa: E501

        List all saved searches available to the authenticated user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_searches_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Token representing a specific page of results. This should never be constructed manually.
        :param int page_size: Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.
        :param str sort: Field and direction to order results by. This may not be provided with the \"_page\" parameter.
        :param str search_type: Search type filter.
        :return: SearchPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'sort', 'search_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_searches" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 250:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_searches`, must be a value less than or equal to `250`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_searches`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('_page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('_sort', params['sort']))  # noqa: E501
        if 'search_type' in params:
            query_params.append(('search_type', params['search_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/searches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quick_search(self, search, **kwargs):  # noqa: E501
        """Quick Search  # noqa: E501

        Executes a structured item search.  The search APIs allow for both simple and complex `item` searches. Complex searches support boolean conditions, multiple values, geometries using GeoJSON and others. You can also save, retrieve and execute searches that you use frequently for easy use later.  [Learn more about searching](/docs/searches-filtering)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.quick_search(search, async=True)
        >>> result = thread.get()

        :param async bool
        :param QuickSearch search: The structured search criteria. (required)
        :param int page_size: Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.
        :param str sort: Field and direction to order results by. This may not be provided with the \"_page\" parameter.
        :param bool strict: Strictly remove false positives from geo intersection.
        :return: ItemPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.quick_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.quick_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def quick_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """Quick Search  # noqa: E501

        Executes a structured item search.  The search APIs allow for both simple and complex `item` searches. Complex searches support boolean conditions, multiple values, geometries using GeoJSON and others. You can also save, retrieve and execute searches that you use frequently for easy use later.  [Learn more about searching](/docs/searches-filtering)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.quick_search_with_http_info(search, async=True)
        >>> result = thread.get()

        :param async bool
        :param QuickSearch search: The structured search criteria. (required)
        :param int page_size: Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.
        :param str sort: Field and direction to order results by. This may not be provided with the \"_page\" parameter.
        :param bool strict: Strictly remove false positives from geo intersection.
        :return: ItemPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'page_size', 'sort', 'strict']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quick_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `quick_search`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 250:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `quick_search`, must be a value less than or equal to `250`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `quick_search`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('_page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('_sort', params['sort']))  # noqa: E501
        if 'strict' in params:
            query_params.append(('strict', params['strict']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/quick-search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_delete(self, search_id, **kwargs):  # noqa: E501
        """Delete Saved Search  # noqa: E501

        Delete an existing saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_delete(search_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_delete_with_http_info(search_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_delete_with_http_info(search_id, **kwargs)  # noqa: E501
            return data

    def search_delete_with_http_info(self, search_id, **kwargs):  # noqa: E501
        """Delete Saved Search  # noqa: E501

        Delete an existing saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_delete_with_http_info(search_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_id' is set
        if ('search_id' not in params or
                params['search_id'] is None):
            raise ValueError("Missing the required parameter `search_id` when calling `search_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search_id' in params:
            path_params['search_id'] = params['search_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/searches/{search_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_detail(self, search_id, **kwargs):  # noqa: E501
        """Get Saved Search  # noqa: E501

        Get a saved search by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_detail(search_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_detail_with_http_info(search_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_detail_with_http_info(search_id, **kwargs)  # noqa: E501
            return data

    def search_detail_with_http_info(self, search_id, **kwargs):  # noqa: E501
        """Get Saved Search  # noqa: E501

        Get a saved search by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_detail_with_http_info(search_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_id' is set
        if ('search_id' not in params or
                params['search_id'] is None):
            raise ValueError("Missing the required parameter `search_id` when calling `search_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search_id' in params:
            path_params['search_id'] = params['search_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/searches/{search_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_results(self, search_id, **kwargs):  # noqa: E501
        """Run Saved Search  # noqa: E501

        Executes a saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_results(search_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :param str page: Token representing a specific page of results. This should never be constructed manually.
        :param int page_size: Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.
        :param str sort: Field and direction to order results by. This may not be provided with the \"_page\" parameter.
        :param bool strict: Strictly remove false positives from geo intersection.
        :return: ItemPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_results_with_http_info(search_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_results_with_http_info(search_id, **kwargs)  # noqa: E501
            return data

    def search_results_with_http_info(self, search_id, **kwargs):  # noqa: E501
        """Run Saved Search  # noqa: E501

        Executes a saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_results_with_http_info(search_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :param str page: Token representing a specific page of results. This should never be constructed manually.
        :param int page_size: Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.
        :param str sort: Field and direction to order results by. This may not be provided with the \"_page\" parameter.
        :param bool strict: Strictly remove false positives from geo intersection.
        :return: ItemPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_id', 'page', 'page_size', 'sort', 'strict']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_id' is set
        if ('search_id' not in params or
                params['search_id'] is None):
            raise ValueError("Missing the required parameter `search_id` when calling `search_results`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 250:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_results`, must be a value less than or equal to `250`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_results`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'search_id' in params:
            path_params['search_id'] = params['search_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('_page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('_sort', params['sort']))  # noqa: E501
        if 'strict' in params:
            query_params.append(('strict', params['strict']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/searches/{search_id}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_update(self, search_id, search, **kwargs):  # noqa: E501
        """Update Saved Search  # noqa: E501

        Update an existing saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_update(search_id, search, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :param SavedSearch search: The structured search criteria. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_update_with_http_info(search_id, search, **kwargs)  # noqa: E501
        else:
            (data) = self.search_update_with_http_info(search_id, search, **kwargs)  # noqa: E501
            return data

    def search_update_with_http_info(self, search_id, search, **kwargs):  # noqa: E501
        """Update Saved Search  # noqa: E501

        Update an existing saved search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_update_with_http_info(search_id, search, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_id: Saved search identifier. (required)
        :param SavedSearch search: The structured search criteria. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_id', 'search']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_id' is set
        if ('search_id' not in params or
                params['search_id'] is None):
            raise ValueError("Missing the required parameter `search_id` when calling `search_update`")  # noqa: E501
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `search_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search_id' in params:
            path_params['search_id'] = params['search_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/searches/{search_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
