# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItemsAndAssetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_asset_type(self, asset_type_id, **kwargs):  # noqa: E501
        """Get Asset Type  # noqa: E501

        Get an asset type by id. An `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.  [Learn more about asset types](/docs/items-assets#section-assets)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_asset_type(asset_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str asset_type_id: Asset type identifier. (required)
        :return: AssetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_asset_type_with_http_info(asset_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_type_with_http_info(asset_type_id, **kwargs)  # noqa: E501
            return data

    def get_asset_type_with_http_info(self, asset_type_id, **kwargs):  # noqa: E501
        """Get Asset Type  # noqa: E501

        Get an asset type by id. An `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.  [Learn more about asset types](/docs/items-assets#section-assets)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_asset_type_with_http_info(asset_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str asset_type_id: Asset type identifier. (required)
        :return: AssetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_type_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_type_id' is set
        if ('asset_type_id' not in params or
                params['asset_type_id'] is None):
            raise ValueError("Missing the required parameter `asset_type_id` when calling `get_asset_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_type_id' in params:
            path_params['asset_type_id'] = params['asset_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/asset-types/{asset_type_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetType',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item(self, item_type_id, item_id, **kwargs):  # noqa: E501
        """Get Item  # noqa: E501

        Get an item by id and item type.  In the Planet API, an `item` is an entry in our catalog, and generally represents a single logical observation (or scene) captured by a satellite. Each `item` is defined by an `item_type`, which represents the class of spacecraft and/or processing level of the item. Assets (or products, such as visual or analytic) can be derived from the item's source data.  [Learn more about items](/docs/items-assets#section-items)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item(item_type_id, item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str item_type_id: Item type identifier. (required)
        :param str item_id: Item identifier. (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_item_with_http_info(item_type_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_with_http_info(item_type_id, item_id, **kwargs)  # noqa: E501
            return data

    def get_item_with_http_info(self, item_type_id, item_id, **kwargs):  # noqa: E501
        """Get Item  # noqa: E501

        Get an item by id and item type.  In the Planet API, an `item` is an entry in our catalog, and generally represents a single logical observation (or scene) captured by a satellite. Each `item` is defined by an `item_type`, which represents the class of spacecraft and/or processing level of the item. Assets (or products, such as visual or analytic) can be derived from the item's source data.  [Learn more about items](/docs/items-assets#section-items)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item_with_http_info(item_type_id, item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str item_type_id: Item type identifier. (required)
        :param str item_id: Item identifier. (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_type_id', 'item_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_type_id' is set
        if ('item_type_id' not in params or
                params['item_type_id'] is None):
            raise ValueError("Missing the required parameter `item_type_id` when calling `get_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_type_id' in params:
            path_params['item_type_id'] = params['item_type_id']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/item-types/{item_type_id}/items/{item_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_type(self, item_type_id, **kwargs):  # noqa: E501
        """Get Item Type  # noqa: E501

        Get an item type by id.  An `item_type` represents the class of spacecraft and/or processing level of an item. All items have an associated `item_type`. Each `item_type` has a specific list of `assets_types` that can be derived from the item's source data.  [Learn more about item types](/docs/items-assets#section-item-types)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item_type(item_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str item_type_id: Item type identifier. (required)
        :return: ItemType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_item_type_with_http_info(item_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_type_with_http_info(item_type_id, **kwargs)  # noqa: E501
            return data

    def get_item_type_with_http_info(self, item_type_id, **kwargs):  # noqa: E501
        """Get Item Type  # noqa: E501

        Get an item type by id.  An `item_type` represents the class of spacecraft and/or processing level of an item. All items have an associated `item_type`. Each `item_type` has a specific list of `assets_types` that can be derived from the item's source data.  [Learn more about item types](/docs/items-assets#section-item-types)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item_type_with_http_info(item_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str item_type_id: Item type identifier. (required)
        :return: ItemType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_type_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_type_id' is set
        if ('item_type_id' not in params or
                params['item_type_id'] is None):
            raise ValueError("Missing the required parameter `item_type_id` when calling `get_item_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_type_id' in params:
            path_params['item_type_id'] = params['item_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/item-types/{item_type_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemType',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_asset_types(self, **kwargs):  # noqa: E501
        """List Asset Types  # noqa: E501

        List all asset types available to the authenticated user.  An `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.    [Learn more about asset types](/docs/items-assets#section-assets)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_asset_types(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AssetTypePage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_asset_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_asset_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_asset_types_with_http_info(self, **kwargs):  # noqa: E501
        """List Asset Types  # noqa: E501

        List all asset types available to the authenticated user.  An `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.    [Learn more about asset types](/docs/items-assets#section-assets)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_asset_types_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AssetTypePage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_asset_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/asset-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetTypePage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_item_assets(self, item_type_id, item_id, **kwargs):  # noqa: E501
        """List Item Assets  # noqa: E501

        List all assets available for an item. An `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.  [Learn more about asset types](/docs/items-assets#section-assets)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_item_assets(item_type_id, item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str item_type_id: Item type identifier. (required)
        :param str item_id: Item identifier. (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_item_assets_with_http_info(item_type_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_item_assets_with_http_info(item_type_id, item_id, **kwargs)  # noqa: E501
            return data

    def list_item_assets_with_http_info(self, item_type_id, item_id, **kwargs):  # noqa: E501
        """List Item Assets  # noqa: E501

        List all assets available for an item. An `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.  [Learn more about asset types](/docs/items-assets#section-assets)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_item_assets_with_http_info(item_type_id, item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str item_type_id: Item type identifier. (required)
        :param str item_id: Item identifier. (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_type_id', 'item_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_item_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_type_id' is set
        if ('item_type_id' not in params or
                params['item_type_id'] is None):
            raise ValueError("Missing the required parameter `item_type_id` when calling `list_item_assets`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `list_item_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_type_id' in params:
            path_params['item_type_id'] = params['item_type_id']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/item-types/{item_type_id}/items/{item_id}/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Asset',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_item_types(self, **kwargs):  # noqa: E501
        """List Item Types  # noqa: E501

        List all item types available to the authenticated user.  An `item_type` represents the class of spacecraft and/or processing level of an item. All items have an associated `item_type`. Each `item_type` has a specific list of `assets_types` that can be derived from the item's source data.  [Learn more about item types](/docs/items-assets#section-item-types)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_item_types(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ItemTypePage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_item_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_item_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_item_types_with_http_info(self, **kwargs):  # noqa: E501
        """List Item Types  # noqa: E501

        List all item types available to the authenticated user.  An `item_type` represents the class of spacecraft and/or processing level of an item. All items have an associated `item_type`. Each `item_type` has a specific list of `assets_types` that can be derived from the item's source data.  [Learn more about item types](/docs/items-assets#section-item-types)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_item_types_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ItemTypePage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_item_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data/v1/item-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemTypePage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
