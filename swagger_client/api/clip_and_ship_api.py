# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClipAndShipApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clip_scene(self, body, **kwargs):  # noqa: E501
        """List Clips  # noqa: E501

        Clips a scene.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clip_scene(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ClipRequest body: Clip details. (required)
        :return: Clip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.clip_scene_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.clip_scene_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def clip_scene_with_http_info(self, body, **kwargs):  # noqa: E501
        """List Clips  # noqa: E501

        Clips a scene.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clip_scene_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ClipRequest body: Clip details. (required)
        :return: Clip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clip_scene" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clip_scene`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/compute/ops/clips/v1', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Clip',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clip(self, clip_id, **kwargs):  # noqa: E501
        """Get Clip  # noqa: E501

        Get clip request details by Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_clip(clip_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str clip_id: The Clip ID (a UUID). (required)
        :return: Clip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_clip_with_http_info(clip_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clip_with_http_info(clip_id, **kwargs)  # noqa: E501
            return data

    def get_clip_with_http_info(self, clip_id, **kwargs):  # noqa: E501
        """Get Clip  # noqa: E501

        Get clip request details by Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_clip_with_http_info(clip_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str clip_id: The Clip ID (a UUID). (required)
        :return: Clip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clip_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clip_id' is set
        if ('clip_id' not in params or
                params['clip_id'] is None):
            raise ValueError("Missing the required parameter `clip_id` when calling `get_clip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clip_id' in params:
            path_params['clip_id'] = params['clip_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/compute/ops/clips/v1/{clip_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Clip',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_clips(self, **kwargs):  # noqa: E501
        """List Clips  # noqa: E501

        Returns all pending clip requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_clips(async=True)
        >>> result = thread.get()

        :param async bool
        :param str page_marker: Paging marker
        :return: ClipListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_clips_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_clips_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_clips_with_http_info(self, **kwargs):  # noqa: E501
        """List Clips  # noqa: E501

        Returns all pending clip requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_clips_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str page_marker: Paging marker
        :return: ClipListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_marker']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_clips" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_marker' in params:
            query_params.append(('page_marker', params['page_marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/compute/ops/clips/v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClipListPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
