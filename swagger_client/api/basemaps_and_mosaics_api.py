# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BasemapsAndMosaicsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_mosaic(self, mosaic_id, **kwargs):  # noqa: E501
        """Get Mosaic  # noqa: E501

        Get a mosaic by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mosaic(mosaic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :return: Mosaic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_mosaic_with_http_info(mosaic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mosaic_with_http_info(mosaic_id, **kwargs)  # noqa: E501
            return data

    def get_mosaic_with_http_info(self, mosaic_id, **kwargs):  # noqa: E501
        """Get Mosaic  # noqa: E501

        Get a mosaic by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mosaic_with_http_info(mosaic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :return: Mosaic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mosaic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_mosaic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mosaic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mosaic_grid(self, mosaic_id, **kwargs):  # noqa: E501
        """Get Mosaic Grid  # noqa: E501

        Get extended mosaic metadata by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mosaic_grid(mosaic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :return: GridContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_mosaic_grid_with_http_info(mosaic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mosaic_grid_with_http_info(mosaic_id, **kwargs)  # noqa: E501
            return data

    def get_mosaic_grid_with_http_info(self, mosaic_id, **kwargs):  # noqa: E501
        """Get Mosaic Grid  # noqa: E501

        Get extended mosaic metadata by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mosaic_grid_with_http_info(mosaic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :return: GridContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mosaic_grid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_mosaic_grid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}/grid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridContext',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mosaic_tile_json(self, mosaic_id, **kwargs):  # noqa: E501
        """Get Mosaic TileJSON  # noqa: E501

        Get TileJSON for Mosaic. See https://github.com/mapbox/tilejson-spec  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mosaic_tile_json(mosaic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_mosaic_tile_json_with_http_info(mosaic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mosaic_tile_json_with_http_info(mosaic_id, **kwargs)  # noqa: E501
            return data

    def get_mosaic_tile_json_with_http_info(self, mosaic_id, **kwargs):  # noqa: E501
        """Get Mosaic TileJSON  # noqa: E501

        Get TileJSON for Mosaic. See https://github.com/mapbox/tilejson-spec  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mosaic_tile_json_with_http_info(mosaic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mosaic_tile_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_mosaic_tile_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}/tiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quad(self, mosaic_id, quad_id, **kwargs):  # noqa: E501
        """Get Mosaic Quad  # noqa: E501

        Get mosaic quad by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad(mosaic_id, quad_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str quad_id: Quad identifier. (required)
        :return: Quad
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_quad_with_http_info(mosaic_id, quad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quad_with_http_info(mosaic_id, quad_id, **kwargs)  # noqa: E501
            return data

    def get_quad_with_http_info(self, mosaic_id, quad_id, **kwargs):  # noqa: E501
        """Get Mosaic Quad  # noqa: E501

        Get mosaic quad by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_with_http_info(mosaic_id, quad_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str quad_id: Quad identifier. (required)
        :return: Quad
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id', 'quad_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quad" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_quad`")  # noqa: E501
        # verify the required parameter 'quad_id' is set
        if ('quad_id' not in params or
                params['quad_id'] is None):
            raise ValueError("Missing the required parameter `quad_id` when calling `get_quad`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501
        if 'quad_id' in params:
            path_params['quad_id'] = params['quad_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}/quads/{quad_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quad',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quad_download(self, mosaic_id, quad_id, **kwargs):  # noqa: E501
        """Get Mosaic Quad URL  # noqa: E501

        Get a full quad download URL quad id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_download(mosaic_id, quad_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str quad_id: Quad identifier. (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_quad_download_with_http_info(mosaic_id, quad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quad_download_with_http_info(mosaic_id, quad_id, **kwargs)  # noqa: E501
            return data

    def get_quad_download_with_http_info(self, mosaic_id, quad_id, **kwargs):  # noqa: E501
        """Get Mosaic Quad URL  # noqa: E501

        Get a full quad download URL quad id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_download_with_http_info(mosaic_id, quad_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str quad_id: Quad identifier. (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id', 'quad_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quad_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_quad_download`")  # noqa: E501
        # verify the required parameter 'quad_id' is set
        if ('quad_id' not in params or
                params['quad_id'] is None):
            raise ValueError("Missing the required parameter `quad_id` when calling `get_quad_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501
        if 'quad_id' in params:
            path_params['quad_id'] = params['quad_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}/quads/{quad_id}/full', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quad_download_links(self, mosaic_id, bbox, **kwargs):  # noqa: E501
        """List Mosaic Quads  # noqa: E501

        List of quad download links for a mosaic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_download_links(mosaic_id, bbox, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str bbox: Comma separated bounding box in degrees as lx,ly,ux,uy. (required)
        :param bool minimal: If true, only return quad download links.
        :param str page: Integer representing a specific page of results.
        :param int page_size: Number of results to return per page.
        :return: QuadListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_quad_download_links_with_http_info(mosaic_id, bbox, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quad_download_links_with_http_info(mosaic_id, bbox, **kwargs)  # noqa: E501
            return data

    def get_quad_download_links_with_http_info(self, mosaic_id, bbox, **kwargs):  # noqa: E501
        """List Mosaic Quads  # noqa: E501

        List of quad download links for a mosaic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_download_links_with_http_info(mosaic_id, bbox, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str bbox: Comma separated bounding box in degrees as lx,ly,ux,uy. (required)
        :param bool minimal: If true, only return quad download links.
        :param str page: Integer representing a specific page of results.
        :param int page_size: Number of results to return per page.
        :return: QuadListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id', 'bbox', 'minimal', 'page', 'page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quad_download_links" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_quad_download_links`")  # noqa: E501
        # verify the required parameter 'bbox' is set
        if ('bbox' not in params or
                params['bbox'] is None):
            raise ValueError("Missing the required parameter `bbox` when calling `get_quad_download_links`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501

        query_params = []
        if 'bbox' in params:
            query_params.append(('bbox', params['bbox']))  # noqa: E501
        if 'minimal' in params:
            query_params.append(('minimal', params['minimal']))  # noqa: E501
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('_page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}/quads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuadListPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quad_items(self, mosaic_id, quad_id, **kwargs):  # noqa: E501
        """List Mosaic Quad Items  # noqa: E501

        List items that contributed to a quad.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_items(mosaic_id, quad_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str quad_id: Quad identifier. (required)
        :return: QuadItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_quad_items_with_http_info(mosaic_id, quad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quad_items_with_http_info(mosaic_id, quad_id, **kwargs)  # noqa: E501
            return data

    def get_quad_items_with_http_info(self, mosaic_id, quad_id, **kwargs):  # noqa: E501
        """List Mosaic Quad Items  # noqa: E501

        List items that contributed to a quad.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_quad_items_with_http_info(mosaic_id, quad_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mosaic_id: Mosaic identifier. (required)
        :param str quad_id: Quad identifier. (required)
        :return: QuadItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id', 'quad_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quad_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_quad_items`")  # noqa: E501
        # verify the required parameter 'quad_id' is set
        if ('quad_id' not in params or
                params['quad_id'] is None):
            raise ValueError("Missing the required parameter `quad_id` when calling `get_quad_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaic_id'] = params['mosaic_id']  # noqa: E501
        if 'quad_id' in params:
            path_params['quad_id'] = params['quad_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics/{mosaic_id}/quads/{quad_id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuadItems',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_series(self, series_id, **kwargs):  # noqa: E501
        """Get Mosaic Series  # noqa: E501

        Get a mosaic series by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_series(series_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str series_id: Series identifier. (required)
        :return: MosaicSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_series_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_series_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def get_series_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """Get Mosaic Series  # noqa: E501

        Get a mosaic series by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_series_with_http_info(series_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str series_id: Series identifier. (required)
        :return: MosaicSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if ('series_id' not in params or
                params['series_id'] is None):
            raise ValueError("Missing the required parameter `series_id` when calling `get_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['series_id'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/series/{series_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MosaicSeries',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_series_mosaics(self, series_id, **kwargs):  # noqa: E501
        """List Series&#39; Mosaics  # noqa: E501

        List mosaics in this series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_series_mosaics(series_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str series_id: Series identifier. (required)
        :return: MosaicSeriesMosaicsListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_series_mosaics_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_series_mosaics_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def get_series_mosaics_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """List Series&#39; Mosaics  # noqa: E501

        List mosaics in this series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_series_mosaics_with_http_info(series_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str series_id: Series identifier. (required)
        :return: MosaicSeriesMosaicsListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_series_mosaics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if ('series_id' not in params or
                params['series_id'] is None):
            raise ValueError("Missing the required parameter `series_id` when calling `get_series_mosaics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['series_id'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/series/{series_id}/mosaics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MosaicSeriesMosaicsListPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mosaics(self, **kwargs):  # noqa: E501
        """List Mosaics  # noqa: E501

        List all accessible mosaics. For non authenticated users, this returns public mosaics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_mosaics(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Integer representing a specific page of results.
        :param int page_size: Number of results to return per page.
        :return: MosaicListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_mosaics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_mosaics_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_mosaics_with_http_info(self, **kwargs):  # noqa: E501
        """List Mosaics  # noqa: E501

        List all accessible mosaics. For non authenticated users, this returns public mosaics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_mosaics_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Integer representing a specific page of results.
        :param int page_size: Number of results to return per page.
        :return: MosaicListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mosaics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('_page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/mosaics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MosaicListPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_series(self, **kwargs):  # noqa: E501
        """List Mosaic Series  # noqa: E501

        List all mosaic series available to the authenticated user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_series(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Integer representing a specific page of results.
        :param int page_size: Number of results to return per page.
        :return: MosaicSeriesListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_series_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_series_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_series_with_http_info(self, **kwargs):  # noqa: E501
        """List Mosaic Series  # noqa: E501

        List all mosaic series available to the authenticated user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_series_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Integer representing a specific page of results.
        :param int page_size: Number of results to return per page.
        :return: MosaicSeriesListPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_series" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('_page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/basemaps/v1/series', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MosaicSeriesListPage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
