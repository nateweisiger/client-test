# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.clip_links import ClipLinks  # noqa: F401,E501
from swagger_client.models.product import Product  # noqa: F401,E501


class Clip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'ClipLinks',
        'aoi': 'object',
        'created_on': 'datetime',
        'id': 'str',
        'last_modified': 'datetime',
        'state': 'str',
        'targets': 'list[Product]',
        'taskgroup': 'object'
    }

    attribute_map = {
        'links': '_links',
        'aoi': 'aoi',
        'created_on': 'created_on',
        'id': 'id',
        'last_modified': 'last_modified',
        'state': 'state',
        'targets': 'targets',
        'taskgroup': 'taskgroup'
    }

    def __init__(self, links=None, aoi=None, created_on=None, id=None, last_modified=None, state=None, targets=None, taskgroup=None):  # noqa: E501
        """Clip - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._aoi = None
        self._created_on = None
        self._id = None
        self._last_modified = None
        self._state = None
        self._targets = None
        self._taskgroup = None
        self.discriminator = None

        if links is not None:
            self.links = links
        self.aoi = aoi
        if created_on is not None:
            self.created_on = created_on
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified
        if state is not None:
            self.state = state
        self.targets = targets
        if taskgroup is not None:
            self.taskgroup = taskgroup

    @property
    def links(self):
        """Gets the links of this Clip.  # noqa: E501


        :return: The links of this Clip.  # noqa: E501
        :rtype: ClipLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Clip.


        :param links: The links of this Clip.  # noqa: E501
        :type: ClipLinks
        """

        self._links = links

    @property
    def aoi(self):
        """Gets the aoi of this Clip.  # noqa: E501

        The geojson representation of the clipped region that has either been requested to be performed on the set of targets, or has been depending on the state of the operation.  # noqa: E501

        :return: The aoi of this Clip.  # noqa: E501
        :rtype: object
        """
        return self._aoi

    @aoi.setter
    def aoi(self, aoi):
        """Sets the aoi of this Clip.

        The geojson representation of the clipped region that has either been requested to be performed on the set of targets, or has been depending on the state of the operation.  # noqa: E501

        :param aoi: The aoi of this Clip.  # noqa: E501
        :type: object
        """
        if aoi is None:
            raise ValueError("Invalid value for `aoi`, must not be `None`")  # noqa: E501

        self._aoi = aoi

    @property
    def created_on(self):
        """Gets the created_on of this Clip.  # noqa: E501

        The UTC date this Clip request was created.  # noqa: E501

        :return: The created_on of this Clip.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Clip.

        The UTC date this Clip request was created.  # noqa: E501

        :param created_on: The created_on of this Clip.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def id(self):
        """Gets the id of this Clip.  # noqa: E501

        A UUID to uniquely identify this Clip request.  # noqa: E501

        :return: The id of this Clip.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Clip.

        A UUID to uniquely identify this Clip request.  # noqa: E501

        :param id: The id of this Clip.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this Clip.  # noqa: E501

        The UTC date this Clip request was last modified.  # noqa: E501

        :return: The last_modified of this Clip.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Clip.

        The UTC date this Clip request was last modified.  # noqa: E501

        :param last_modified: The last_modified of this Clip.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def state(self):
        """Gets the state of this Clip.  # noqa: E501

        The current state of this clip request.  # noqa: E501

        :return: The state of this Clip.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Clip.

        The current state of this clip request.  # noqa: E501

        :param state: The state of this Clip.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def targets(self):
        """Gets the targets of this Clip.  # noqa: E501

        The target imagery from the Data API to apply the Clip operation on.  # noqa: E501

        :return: The targets of this Clip.  # noqa: E501
        :rtype: list[Product]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Clip.

        The target imagery from the Data API to apply the Clip operation on.  # noqa: E501

        :param targets: The targets of this Clip.  # noqa: E501
        :type: list[Product]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")  # noqa: E501

        self._targets = targets

    @property
    def taskgroup(self):
        """Gets the taskgroup of this Clip.  # noqa: E501

        Optional debugging information.  # noqa: E501

        :return: The taskgroup of this Clip.  # noqa: E501
        :rtype: object
        """
        return self._taskgroup

    @taskgroup.setter
    def taskgroup(self, taskgroup):
        """Sets the taskgroup of this Clip.

        Optional debugging information.  # noqa: E501

        :param taskgroup: The taskgroup of this Clip.  # noqa: E501
        :type: object
        """

        self._taskgroup = taskgroup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Clip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
