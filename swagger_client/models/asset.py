# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Asset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'object',
        'permissions': 'list[str]',
        'expires_at': 'datetime',
        'location': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'links': '_links',
        'permissions': '_permissions',
        'expires_at': 'expires_at',
        'location': 'location',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, links=None, permissions=None, expires_at=None, location=None, status=None, type=None):  # noqa: E501
        """Asset - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._permissions = None
        self._expires_at = None
        self._location = None
        self._status = None
        self._type = None
        self.discriminator = None

        self.links = links
        self.permissions = permissions
        if expires_at is not None:
            self.expires_at = expires_at
        if location is not None:
            self.location = location
        self.status = status
        self.type = type

    @property
    def links(self):
        """Gets the links of this Asset.  # noqa: E501

        Links to related endpoints.  # noqa: E501

        :return: The links of this Asset.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Asset.

        Links to related endpoints.  # noqa: E501

        :param links: The links of this Asset.  # noqa: E501
        :type: object
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def permissions(self):
        """Gets the permissions of this Asset.  # noqa: E501

        An array of permissons the authenticated user has to the item.  # noqa: E501

        :return: The permissions of this Asset.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Asset.

        An array of permissons the authenticated user has to the item.  # noqa: E501

        :param permissions: The permissions of this Asset.  # noqa: E501
        :type: list[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501
        allowed_values = ["download"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    @property
    def expires_at(self):
        """Gets the expires_at of this Asset.  # noqa: E501

        If present, RFC 3339 timestamp indicating when this asset will become inactive and will require reactivation.  # noqa: E501

        :return: The expires_at of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Asset.

        If present, RFC 3339 timestamp indicating when this asset will become inactive and will require reactivation.  # noqa: E501

        :param expires_at: The expires_at of this Asset.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def location(self):
        """Gets the location of this Asset.  # noqa: E501

        If present, RFC 3986 URI that indicates a location that will yield image data. Consult the documentation of the asset type to understand how to use this URI.  # noqa: E501

        :return: The location of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Asset.

        If present, RFC 3986 URI that indicates a location that will yield image data. Consult the documentation of the asset type to understand how to use this URI.  # noqa: E501

        :param location: The location of this Asset.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def status(self):
        """Gets the status of this Asset.  # noqa: E501

        Current status of the asset.  Inactive - Asset is not currently available for download, but may be after activation.  Activating - Asset is currently undergoing activation, and may be available for download shortly.  Active - Asset has been activated, and may currently be available for download if the authentication context permits.  # noqa: E501

        :return: The status of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Asset.

        Current status of the asset.  Inactive - Asset is not currently available for download, but may be after activation.  Activating - Asset is currently undergoing activation, and may be available for download shortly.  Active - Asset has been activated, and may currently be available for download if the authentication context permits.  # noqa: E501

        :param status: The status of this Asset.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["inactive", "activating", "active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Asset.  # noqa: E501

        Type identifier of the asset.  # noqa: E501

        :return: The type of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Asset.

        Type identifier of the asset.  # noqa: E501

        :param type: The type of this Asset.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
