# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.filter import Filter  # noqa: F401,E501


class Stats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'Filter',
        'interval': 'str',
        'item_types': 'list[str]',
        'utc_offset': 'str'
    }

    attribute_map = {
        'filter': 'filter',
        'interval': 'interval',
        'item_types': 'item_types',
        'utc_offset': 'utc_offset'
    }

    def __init__(self, filter=None, interval=None, item_types=None, utc_offset=None):  # noqa: E501
        """Stats - a model defined in Swagger"""  # noqa: E501

        self._filter = None
        self._interval = None
        self._item_types = None
        self._utc_offset = None
        self.discriminator = None

        self.filter = filter
        self.interval = interval
        if item_types is not None:
            self.item_types = item_types
        if utc_offset is not None:
            self.utc_offset = utc_offset

    @property
    def filter(self):
        """Gets the filter of this Stats.  # noqa: E501


        :return: The filter of this Stats.  # noqa: E501
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Stats.


        :param filter: The filter of this Stats.  # noqa: E501
        :type: Filter
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    @property
    def interval(self):
        """Gets the interval of this Stats.  # noqa: E501

        The size of the histogram date buckets.  # noqa: E501

        :return: The interval of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Stats.

        The size of the histogram date buckets.  # noqa: E501

        :param interval: The interval of this Stats.  # noqa: E501
        :type: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501
        allowed_values = ["hour", "day", "week", "month", "year"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"  # noqa: E501
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def item_types(self):
        """Gets the item_types of this Stats.  # noqa: E501

        The item types to include in the stats.  # noqa: E501

        :return: The item_types of this Stats.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_types

    @item_types.setter
    def item_types(self, item_types):
        """Sets the item_types of this Stats.

        The item types to include in the stats.  # noqa: E501

        :param item_types: The item_types of this Stats.  # noqa: E501
        :type: list[str]
        """

        self._item_types = item_types

    @property
    def utc_offset(self):
        """Gets the utc_offset of this Stats.  # noqa: E501

        A \"ISO 8601 UTC offset\" (e.g. +01:00 or -08:00) that can be used to adjust the buckets to a users time zone. It is optional.  # noqa: E501

        :return: The utc_offset of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this Stats.

        A \"ISO 8601 UTC offset\" (e.g. +01:00 or -08:00) that can be used to adjust the buckets to a users time zone. It is optional.  # noqa: E501

        :param utc_offset: The utc_offset of this Stats.  # noqa: E501
        :type: str
        """

        self._utc_offset = utc_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
