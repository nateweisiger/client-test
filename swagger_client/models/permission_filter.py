# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.filter import Filter  # noqa: F401,E501


class PermissionFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'list[str]'
    }

    attribute_map = {
        'config': 'config'
    }

    def __init__(self, config=None):  # noqa: E501
        """PermissionFilter - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self.discriminator = None

        self.config = config

    @property
    def config(self):
        """Gets the config of this PermissionFilter.  # noqa: E501


        :return: The config of this PermissionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this PermissionFilter.


        :param config: The config of this PermissionFilter.  # noqa: E501
        :type: list[str]
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501
        allowed_values = ["assets:download", "assets.analytic:download", "assets.analytic_dn:download", "assets.analytic_dn_xml:download", "assets.analytic_xml:download", "assets.basic_analytic:download", "assets.basic_analytic_dn:download", "assets.basic_analytic_dn_nitf:download", "assets.basic_analytic_dn_rpc:download", "assets.basic_analytic_dn_rpc_nitf:download", "assets.basic_analytic_dn_xml:download", "assets.basic_analytic_dn_xml_nitf:download", "assets.basic_analytic_nitf:download", "assets.basic_analytic_rpc:download", "assets.basic_analytic_rpc_nitf:download", "assets.basic_analytic_xml:download", "assets.basic_analytic_xml_nitf:download", "assets.basic_rpc:download", "assets.basic_udm:download", "assets.udm:download", "assets.unrectified:download", "assets.visual:download", "assets.visual_xml:download", "assets.basic_analytic_b1:download", "assets.basic_analytic_b2:download", "assets.basic_analytic_b3:download", "assets.basic_analytic_b4:download", "assets.basic_analytic_b5:download", "assets.basic_analytic_b1_nitf:download", "assets.basic_analytic_b2_nitf:download", "assets.basic_analytic_b3_nitf:download", "assets.basic_analytic_b4_nitf:download", "assets.basic_analytic_b5_nitf:download", "assets.basic_analytic_sci:download", "assets.browse:download", "assets.analytic_b1:download", "assets.analytic_b2:download", "assets.analytic_b3:download", "assets.analytic_b4:download", "assets.analytic_b5:download", "assets.analytic_b6:download", "assets.analytic_b7:download", "assets.analytic_b8:download", "assets.analytic_b8a:download", "assets.analytic_b9:download", "assets.analytic_b10:download", "assets.analytic_b11:download", "assets.analytic_b12:download", "assets.analytic_bqa:download", "assets.analytic_ms:download", "assets.metadata_txt:download", "assets.metadata_aux:download", "assets.basic_panchromatic_dn:download", "assets.basic_panchromatic_dn_rpc:download", "assets.ortho_analytic_dn:download", "assets.ortho_analytic_udm:download", "assets.ortho_panchromatic_dn:download", "assets.ortho_panchromatic_udm:download", "assets.ortho_pansharpened:download", "assets.ortho_pansharpened_udm:download", "assets.ortho_visual:download", "assets.analytic_sr:download", "assets.ortho_analytic_vv:download", "assets.ortho_analytic_vh:download", "assets.ortho_analytic_hh:download", "assets.ortho_analytic_hv:download"]  # noqa: E501
        if not set(config).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `config` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(config) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
