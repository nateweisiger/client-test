# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acquired': 'datetime',
        'anomalous_pixels': 'float',
        'black_fill': 'float',
        'cloud_cover': 'float',
        'columns': 'int',
        'epsg_code': 'int',
        'gsd': 'float',
        'item_type': 'str',
        'origin_x': 'int',
        'origin_y': 'int',
        'pixel_resolution': 'int',
        'provider': 'str',
        'published': 'datetime',
        'rows': 'int',
        'satellite_id': 'str',
        'sun_azimuth': 'float',
        'sun_elevation': 'float',
        'updated': 'datetime',
        'usable_data': 'float',
        'view_angle': 'float'
    }

    attribute_map = {
        'acquired': 'acquired',
        'anomalous_pixels': 'anomalous_pixels',
        'black_fill': 'black_fill',
        'cloud_cover': 'cloud_cover',
        'columns': 'columns',
        'epsg_code': 'epsg_code',
        'gsd': 'gsd',
        'item_type': 'item_type',
        'origin_x': 'origin_x',
        'origin_y': 'origin_y',
        'pixel_resolution': 'pixel_resolution',
        'provider': 'provider',
        'published': 'published',
        'rows': 'rows',
        'satellite_id': 'satellite_id',
        'sun_azimuth': 'sun_azimuth',
        'sun_elevation': 'sun_elevation',
        'updated': 'updated',
        'usable_data': 'usable_data',
        'view_angle': 'view_angle'
    }

    def __init__(self, acquired=None, anomalous_pixels=None, black_fill=None, cloud_cover=None, columns=None, epsg_code=None, gsd=None, item_type=None, origin_x=None, origin_y=None, pixel_resolution=None, provider=None, published=None, rows=None, satellite_id=None, sun_azimuth=None, sun_elevation=None, updated=None, usable_data=None, view_angle=None):  # noqa: E501
        """ItemProperties - a model defined in Swagger"""  # noqa: E501

        self._acquired = None
        self._anomalous_pixels = None
        self._black_fill = None
        self._cloud_cover = None
        self._columns = None
        self._epsg_code = None
        self._gsd = None
        self._item_type = None
        self._origin_x = None
        self._origin_y = None
        self._pixel_resolution = None
        self._provider = None
        self._published = None
        self._rows = None
        self._satellite_id = None
        self._sun_azimuth = None
        self._sun_elevation = None
        self._updated = None
        self._usable_data = None
        self._view_angle = None
        self.discriminator = None

        if acquired is not None:
            self.acquired = acquired
        if anomalous_pixels is not None:
            self.anomalous_pixels = anomalous_pixels
        if black_fill is not None:
            self.black_fill = black_fill
        if cloud_cover is not None:
            self.cloud_cover = cloud_cover
        if columns is not None:
            self.columns = columns
        if epsg_code is not None:
            self.epsg_code = epsg_code
        if gsd is not None:
            self.gsd = gsd
        if item_type is not None:
            self.item_type = item_type
        if origin_x is not None:
            self.origin_x = origin_x
        if origin_y is not None:
            self.origin_y = origin_y
        if pixel_resolution is not None:
            self.pixel_resolution = pixel_resolution
        if provider is not None:
            self.provider = provider
        if published is not None:
            self.published = published
        if rows is not None:
            self.rows = rows
        if satellite_id is not None:
            self.satellite_id = satellite_id
        if sun_azimuth is not None:
            self.sun_azimuth = sun_azimuth
        if sun_elevation is not None:
            self.sun_elevation = sun_elevation
        if updated is not None:
            self.updated = updated
        if usable_data is not None:
            self.usable_data = usable_data
        if view_angle is not None:
            self.view_angle = view_angle

    @property
    def acquired(self):
        """Gets the acquired of this ItemProperties.  # noqa: E501

        Timestamp that the item was captured.  # noqa: E501

        :return: The acquired of this ItemProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._acquired

    @acquired.setter
    def acquired(self, acquired):
        """Sets the acquired of this ItemProperties.

        Timestamp that the item was captured.  # noqa: E501

        :param acquired: The acquired of this ItemProperties.  # noqa: E501
        :type: datetime
        """

        self._acquired = acquired

    @property
    def anomalous_pixels(self):
        """Gets the anomalous_pixels of this ItemProperties.  # noqa: E501

        The percentage of pixels that may have errors.  # noqa: E501

        :return: The anomalous_pixels of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._anomalous_pixels

    @anomalous_pixels.setter
    def anomalous_pixels(self, anomalous_pixels):
        """Sets the anomalous_pixels of this ItemProperties.

        The percentage of pixels that may have errors.  # noqa: E501

        :param anomalous_pixels: The anomalous_pixels of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._anomalous_pixels = anomalous_pixels

    @property
    def black_fill(self):
        """Gets the black_fill of this ItemProperties.  # noqa: E501

        The percentage of the item containing black fill.  # noqa: E501

        :return: The black_fill of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._black_fill

    @black_fill.setter
    def black_fill(self, black_fill):
        """Sets the black_fill of this ItemProperties.

        The percentage of the item containing black fill.  # noqa: E501

        :param black_fill: The black_fill of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._black_fill = black_fill

    @property
    def cloud_cover(self):
        """Gets the cloud_cover of this ItemProperties.  # noqa: E501

        Average percentage of cloud coverage throughout the item.  # noqa: E501

        :return: The cloud_cover of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._cloud_cover

    @cloud_cover.setter
    def cloud_cover(self, cloud_cover):
        """Sets the cloud_cover of this ItemProperties.

        Average percentage of cloud coverage throughout the item.  # noqa: E501

        :param cloud_cover: The cloud_cover of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._cloud_cover = cloud_cover

    @property
    def columns(self):
        """Gets the columns of this ItemProperties.  # noqa: E501

        The number of columns in the item.  # noqa: E501

        :return: The columns of this ItemProperties.  # noqa: E501
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ItemProperties.

        The number of columns in the item.  # noqa: E501

        :param columns: The columns of this ItemProperties.  # noqa: E501
        :type: int
        """

        self._columns = columns

    @property
    def epsg_code(self):
        """Gets the epsg_code of this ItemProperties.  # noqa: E501

        The unique code that identifies the spatial reference system for the item.  # noqa: E501

        :return: The epsg_code of this ItemProperties.  # noqa: E501
        :rtype: int
        """
        return self._epsg_code

    @epsg_code.setter
    def epsg_code(self, epsg_code):
        """Sets the epsg_code of this ItemProperties.

        The unique code that identifies the spatial reference system for the item.  # noqa: E501

        :param epsg_code: The epsg_code of this ItemProperties.  # noqa: E501
        :type: int
        """

        self._epsg_code = epsg_code

    @property
    def gsd(self):
        """Gets the gsd of this ItemProperties.  # noqa: E501

        Ground sample distance - the distance between pixel centers as measured on the ground.  # noqa: E501

        :return: The gsd of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._gsd

    @gsd.setter
    def gsd(self, gsd):
        """Sets the gsd of this ItemProperties.

        Ground sample distance - the distance between pixel centers as measured on the ground.  # noqa: E501

        :param gsd: The gsd of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._gsd = gsd

    @property
    def item_type(self):
        """Gets the item_type of this ItemProperties.  # noqa: E501

        The planet item type.  # noqa: E501

        :return: The item_type of this ItemProperties.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this ItemProperties.

        The planet item type.  # noqa: E501

        :param item_type: The item_type of this ItemProperties.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def origin_x(self):
        """Gets the origin_x of this ItemProperties.  # noqa: E501

        ULX coordinate of the extent of the data. The coordinate references the top left corner of the top left pixel.  # noqa: E501

        :return: The origin_x of this ItemProperties.  # noqa: E501
        :rtype: int
        """
        return self._origin_x

    @origin_x.setter
    def origin_x(self, origin_x):
        """Sets the origin_x of this ItemProperties.

        ULX coordinate of the extent of the data. The coordinate references the top left corner of the top left pixel.  # noqa: E501

        :param origin_x: The origin_x of this ItemProperties.  # noqa: E501
        :type: int
        """

        self._origin_x = origin_x

    @property
    def origin_y(self):
        """Gets the origin_y of this ItemProperties.  # noqa: E501

        ULY coordinate of the extent of the data. The coordinate references the top left corner of the top left pixel.  # noqa: E501

        :return: The origin_y of this ItemProperties.  # noqa: E501
        :rtype: int
        """
        return self._origin_y

    @origin_y.setter
    def origin_y(self, origin_y):
        """Sets the origin_y of this ItemProperties.

        ULY coordinate of the extent of the data. The coordinate references the top left corner of the top left pixel.  # noqa: E501

        :param origin_y: The origin_y of this ItemProperties.  # noqa: E501
        :type: int
        """

        self._origin_y = origin_y

    @property
    def pixel_resolution(self):
        """Gets the pixel_resolution of this ItemProperties.  # noqa: E501

        Pixel resolution of the item in meters.  # noqa: E501

        :return: The pixel_resolution of this ItemProperties.  # noqa: E501
        :rtype: int
        """
        return self._pixel_resolution

    @pixel_resolution.setter
    def pixel_resolution(self, pixel_resolution):
        """Sets the pixel_resolution of this ItemProperties.

        Pixel resolution of the item in meters.  # noqa: E501

        :param pixel_resolution: The pixel_resolution of this ItemProperties.  # noqa: E501
        :type: int
        """

        self._pixel_resolution = pixel_resolution

    @property
    def provider(self):
        """Gets the provider of this ItemProperties.  # noqa: E501

        Name of the item provider.  # noqa: E501

        :return: The provider of this ItemProperties.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ItemProperties.

        Name of the item provider.  # noqa: E501

        :param provider: The provider of this ItemProperties.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def published(self):
        """Gets the published of this ItemProperties.  # noqa: E501

        Timestamp that the item was published to the Planet API.  # noqa: E501

        :return: The published of this ItemProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this ItemProperties.

        Timestamp that the item was published to the Planet API.  # noqa: E501

        :param published: The published of this ItemProperties.  # noqa: E501
        :type: datetime
        """

        self._published = published

    @property
    def rows(self):
        """Gets the rows of this ItemProperties.  # noqa: E501

        The number of rows in the item  # noqa: E501

        :return: The rows of this ItemProperties.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ItemProperties.

        The number of rows in the item  # noqa: E501

        :param rows: The rows of this ItemProperties.  # noqa: E501
        :type: int
        """

        self._rows = rows

    @property
    def satellite_id(self):
        """Gets the satellite_id of this ItemProperties.  # noqa: E501

        Globally unique identifier of the satellite that acquired the item.  # noqa: E501

        :return: The satellite_id of this ItemProperties.  # noqa: E501
        :rtype: str
        """
        return self._satellite_id

    @satellite_id.setter
    def satellite_id(self, satellite_id):
        """Sets the satellite_id of this ItemProperties.

        Globally unique identifier of the satellite that acquired the item.  # noqa: E501

        :param satellite_id: The satellite_id of this ItemProperties.  # noqa: E501
        :type: str
        """

        self._satellite_id = satellite_id

    @property
    def sun_azimuth(self):
        """Gets the sun_azimuth of this ItemProperties.  # noqa: E501

        The angle of the sun, as seen by the observer, measured clockwise from the north.  # noqa: E501

        :return: The sun_azimuth of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._sun_azimuth

    @sun_azimuth.setter
    def sun_azimuth(self, sun_azimuth):
        """Sets the sun_azimuth of this ItemProperties.

        The angle of the sun, as seen by the observer, measured clockwise from the north.  # noqa: E501

        :param sun_azimuth: The sun_azimuth of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._sun_azimuth = sun_azimuth

    @property
    def sun_elevation(self):
        """Gets the sun_elevation of this ItemProperties.  # noqa: E501

        The angle of the sun above the horizon.  # noqa: E501

        :return: The sun_elevation of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._sun_elevation

    @sun_elevation.setter
    def sun_elevation(self, sun_elevation):
        """Sets the sun_elevation of this ItemProperties.

        The angle of the sun above the horizon.  # noqa: E501

        :param sun_elevation: The sun_elevation of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._sun_elevation = sun_elevation

    @property
    def updated(self):
        """Gets the updated of this ItemProperties.  # noqa: E501

        Timestamp that the item record was last updated.  # noqa: E501

        :return: The updated of this ItemProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ItemProperties.

        Timestamp that the item record was last updated.  # noqa: E501

        :param updated: The updated of this ItemProperties.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def usable_data(self):
        """Gets the usable_data of this ItemProperties.  # noqa: E501

        The percentage of pixels that are usable.  # noqa: E501

        :return: The usable_data of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._usable_data

    @usable_data.setter
    def usable_data(self, usable_data):
        """Sets the usable_data of this ItemProperties.

        The percentage of pixels that are usable.  # noqa: E501

        :param usable_data: The usable_data of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._usable_data = usable_data

    @property
    def view_angle(self):
        """Gets the view_angle of this ItemProperties.  # noqa: E501

        The satellite's across-track, off-nadir viewing angle. Positive numbers denote east, negitive numbers denote west.  # noqa: E501

        :return: The view_angle of this ItemProperties.  # noqa: E501
        :rtype: float
        """
        return self._view_angle

    @view_angle.setter
    def view_angle(self, view_angle):
        """Sets the view_angle of this ItemProperties.

        The satellite's across-track, off-nadir viewing angle. Positive numbers denote east, negitive numbers denote west.  # noqa: E501

        :param view_angle: The view_angle of this ItemProperties.  # noqa: E501
        :type: float
        """

        self._view_angle = view_angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
