# coding: utf-8

"""
    Planet API

    Top level description of the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.grid_context import GridContext  # noqa: F401,E501
from swagger_client.models.mosaic_links import MosaicLinks  # noqa: F401,E501


class Mosaic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'MosaicLinks',
        'bands': 'int',
        'bbox': 'list[float]',
        'coordinate_system': 'str',
        'datatype': 'str',
        'first_acquired': 'datetime',
        'grid': 'GridContext',
        'id': 'str',
        'interval': 'str',
        'item_types': 'list[str]',
        'last_acquired': 'datetime',
        'level': 'int',
        'name': 'str',
        'product_type': 'str',
        'quad_download': 'bool'
    }

    attribute_map = {
        'links': '_links',
        'bands': 'bands',
        'bbox': 'bbox',
        'coordinate_system': 'coordinate_system',
        'datatype': 'datatype',
        'first_acquired': 'first_acquired',
        'grid': 'grid',
        'id': 'id',
        'interval': 'interval',
        'item_types': 'item_types',
        'last_acquired': 'last_acquired',
        'level': 'level',
        'name': 'name',
        'product_type': 'product_type',
        'quad_download': 'quad_download'
    }

    def __init__(self, links=None, bands=None, bbox=None, coordinate_system=None, datatype=None, first_acquired=None, grid=None, id=None, interval=None, item_types=None, last_acquired=None, level=None, name=None, product_type=None, quad_download=None):  # noqa: E501
        """Mosaic - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._bands = None
        self._bbox = None
        self._coordinate_system = None
        self._datatype = None
        self._first_acquired = None
        self._grid = None
        self._id = None
        self._interval = None
        self._item_types = None
        self._last_acquired = None
        self._level = None
        self._name = None
        self._product_type = None
        self._quad_download = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if bands is not None:
            self.bands = bands
        self.bbox = bbox
        self.coordinate_system = coordinate_system
        if datatype is not None:
            self.datatype = datatype
        self.first_acquired = first_acquired
        if grid is not None:
            self.grid = grid
        if id is not None:
            self.id = id
        if interval is not None:
            self.interval = interval
        if item_types is not None:
            self.item_types = item_types
        self.last_acquired = last_acquired
        if level is not None:
            self.level = level
        self.name = name
        self.product_type = product_type
        if quad_download is not None:
            self.quad_download = quad_download

    @property
    def links(self):
        """Gets the links of this Mosaic.  # noqa: E501


        :return: The links of this Mosaic.  # noqa: E501
        :rtype: MosaicLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Mosaic.


        :param links: The links of this Mosaic.  # noqa: E501
        :type: MosaicLinks
        """

        self._links = links

    @property
    def bands(self):
        """Gets the bands of this Mosaic.  # noqa: E501

        The number of bands in this mosaic.  # noqa: E501

        :return: The bands of this Mosaic.  # noqa: E501
        :rtype: int
        """
        return self._bands

    @bands.setter
    def bands(self, bands):
        """Sets the bands of this Mosaic.

        The number of bands in this mosaic.  # noqa: E501

        :param bands: The bands of this Mosaic.  # noqa: E501
        :type: int
        """

        self._bands = bands

    @property
    def bbox(self):
        """Gets the bbox of this Mosaic.  # noqa: E501

        The bounding box representing the extent of the mosaic.  # noqa: E501

        :return: The bbox of this Mosaic.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Mosaic.

        The bounding box representing the extent of the mosaic.  # noqa: E501

        :param bbox: The bbox of this Mosaic.  # noqa: E501
        :type: list[float]
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")  # noqa: E501

        self._bbox = bbox

    @property
    def coordinate_system(self):
        """Gets the coordinate_system of this Mosaic.  # noqa: E501

        The coordinate system of this mosaic.  # noqa: E501

        :return: The coordinate_system of this Mosaic.  # noqa: E501
        :rtype: str
        """
        return self._coordinate_system

    @coordinate_system.setter
    def coordinate_system(self, coordinate_system):
        """Sets the coordinate_system of this Mosaic.

        The coordinate system of this mosaic.  # noqa: E501

        :param coordinate_system: The coordinate_system of this Mosaic.  # noqa: E501
        :type: str
        """
        if coordinate_system is None:
            raise ValueError("Invalid value for `coordinate_system`, must not be `None`")  # noqa: E501

        self._coordinate_system = coordinate_system

    @property
    def datatype(self):
        """Gets the datatype of this Mosaic.  # noqa: E501

        The type of data (byte, uint16, float32, etc).  # noqa: E501

        :return: The datatype of this Mosaic.  # noqa: E501
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this Mosaic.

        The type of data (byte, uint16, float32, etc).  # noqa: E501

        :param datatype: The datatype of this Mosaic.  # noqa: E501
        :type: str
        """

        self._datatype = datatype

    @property
    def first_acquired(self):
        """Gets the first_acquired of this Mosaic.  # noqa: E501

        The acquisition date of the oldest scene that contributed to this mosaic.  # noqa: E501

        :return: The first_acquired of this Mosaic.  # noqa: E501
        :rtype: datetime
        """
        return self._first_acquired

    @first_acquired.setter
    def first_acquired(self, first_acquired):
        """Sets the first_acquired of this Mosaic.

        The acquisition date of the oldest scene that contributed to this mosaic.  # noqa: E501

        :param first_acquired: The first_acquired of this Mosaic.  # noqa: E501
        :type: datetime
        """
        if first_acquired is None:
            raise ValueError("Invalid value for `first_acquired`, must not be `None`")  # noqa: E501

        self._first_acquired = first_acquired

    @property
    def grid(self):
        """Gets the grid of this Mosaic.  # noqa: E501


        :return: The grid of this Mosaic.  # noqa: E501
        :rtype: GridContext
        """
        return self._grid

    @grid.setter
    def grid(self, grid):
        """Sets the grid of this Mosaic.


        :param grid: The grid of this Mosaic.  # noqa: E501
        :type: GridContext
        """

        self._grid = grid

    @property
    def id(self):
        """Gets the id of this Mosaic.  # noqa: E501

        Mosaic identifier.  # noqa: E501

        :return: The id of this Mosaic.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Mosaic.

        Mosaic identifier.  # noqa: E501

        :param id: The id of this Mosaic.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this Mosaic.  # noqa: E501

        The interval of the mosaic.  # noqa: E501

        :return: The interval of this Mosaic.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Mosaic.

        The interval of the mosaic.  # noqa: E501

        :param interval: The interval of this Mosaic.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def item_types(self):
        """Gets the item_types of this Mosaic.  # noqa: E501

        The item types in this mosaic.  # noqa: E501

        :return: The item_types of this Mosaic.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_types

    @item_types.setter
    def item_types(self, item_types):
        """Sets the item_types of this Mosaic.

        The item types in this mosaic.  # noqa: E501

        :param item_types: The item_types of this Mosaic.  # noqa: E501
        :type: list[str]
        """

        self._item_types = item_types

    @property
    def last_acquired(self):
        """Gets the last_acquired of this Mosaic.  # noqa: E501

        The acquisition date of the newest scene that contributed to this mosaic.  # noqa: E501

        :return: The last_acquired of this Mosaic.  # noqa: E501
        :rtype: datetime
        """
        return self._last_acquired

    @last_acquired.setter
    def last_acquired(self, last_acquired):
        """Sets the last_acquired of this Mosaic.

        The acquisition date of the newest scene that contributed to this mosaic.  # noqa: E501

        :param last_acquired: The last_acquired of this Mosaic.  # noqa: E501
        :type: datetime
        """
        if last_acquired is None:
            raise ValueError("Invalid value for `last_acquired`, must not be `None`")  # noqa: E501

        self._last_acquired = last_acquired

    @property
    def level(self):
        """Gets the level of this Mosaic.  # noqa: E501

        The maximum zoom level in XYZ scheme.  # noqa: E501

        :return: The level of this Mosaic.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Mosaic.

        The maximum zoom level in XYZ scheme.  # noqa: E501

        :param level: The level of this Mosaic.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this Mosaic.  # noqa: E501

        A unique name for this mosaic.  # noqa: E501

        :return: The name of this Mosaic.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mosaic.

        A unique name for this mosaic.  # noqa: E501

        :param name: The name of this Mosaic.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def product_type(self):
        """Gets the product_type of this Mosaic.  # noqa: E501

        The product type of this mosaics, currently supported is \"timelapse\", \"basemap\".  # noqa: E501

        :return: The product_type of this Mosaic.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Mosaic.

        The product type of this mosaics, currently supported is \"timelapse\", \"basemap\".  # noqa: E501

        :param product_type: The product_type of this Mosaic.  # noqa: E501
        :type: str
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def quad_download(self):
        """Gets the quad_download of this Mosaic.  # noqa: E501

        Your quad download permission for this mosaic.  # noqa: E501

        :return: The quad_download of this Mosaic.  # noqa: E501
        :rtype: bool
        """
        return self._quad_download

    @quad_download.setter
    def quad_download(self, quad_download):
        """Sets the quad_download of this Mosaic.

        Your quad download permission for this mosaic.  # noqa: E501

        :param quad_download: The quad_download of this Mosaic.  # noqa: E501
        :type: bool
        """

        self._quad_download = quad_download

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mosaic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
